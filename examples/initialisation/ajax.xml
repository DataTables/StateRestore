<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="html" table-class="display nowrap" order="4">

<css lib="datatables buttons staterestore scroller"/>

<js lib="jquery datatables staterestore buttons scroller">
<![CDATA[
$(document).ready(function() {
    $('#example').DataTable({
        dom: 'Blfrtip',
        ajax: {
          url: "../data/stateRestoreLoad.php",
          dataSrc: 'data'
        },
        deferRender:    true,
        scrollY:        200,
        scrollCollapse: true,
        buttons:[
            'createState',
            {
                extend: 'savedStates',
                config: {
                    ajax: '../data/stateRestoreSave.php'
                }
            }
        ]
    });
});
]]>
</js>

<title lib="stateRestore">Ajax Loading and Saving</title>

<info><![CDATA[
This example shows how the `-init stateRestore` extension can be operated over ajax.

To do this the `-init stateRestore.ajax` option has to be set to a url that will be used when attempting to save the states. States are then loaded again via the tables own ajax url. If there is a `stateRestore` property in the json that is initially passed then the states present there will be loaded into the table.

It is worth noting that we only provide the client side implementation. You will have to write your own server side implementation to save states for longer than the current session.

The scroller extension is also being used here. This is because it is a common use of loading over ajax.
]]></info>

<custom-table>
<table id="example" class="display nowrap" style="width:100%">
        <thead>
            <tr>
                <th>ID</th>
                <th>First name</th>
                <th>Last name</th>
                <th>ZIP / Post code</th>
                <th>Country</th>
            </tr>
        </thead>
    </table>
</custom-table>

</dt-example>