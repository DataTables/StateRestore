<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="html" table-class="display nowrap" order="2">

<css lib="datatables buttons staterestore"/>

<js lib="jquery datatables staterestore buttons">
<![CDATA[

$('#example').DataTable({
	layout: {
		topStart: {
			buttons: [
				{
					extend: 'savedStates',
					buttons: [
						'createState',
						'removeAllStates',
						{extend: 'spacer', style: 'bar'}
					]
				}
			]
		}
	}
});

]]>
</js>

<js-vanilla>
<![CDATA[

new DataTable('#example', {
	layout: {
		topStart: {
			buttons: [
				{
					extend: 'savedStates',
					buttons: [
						'createState',
						'removeAllStates',
						{extend: 'spacer', style: 'bar'}
					]
				}
			]
		}
	}
});

]]>
</js-vanilla>

<title lib="StateRestore">Alternative UI</title>

<info><![CDATA[

This example shows how StateRestore can be initialised using a single button.

Here the `-button savedStates` `-init buttons.buttons` option is used to add the `-button createState` and the `-button removeAllStates` buttons to the collection. This reduces the amount of buttons that are initially displayed to the used and compartmentalises StateRestore nicely.

You can add any buttons that you wish to display to this property, it works in the same way as it would for any other buttons collection.

]]></info>

</dt-example>