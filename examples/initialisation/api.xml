<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="html" table-class="display nowrap" order="2">

<css lib="datatables buttons staterestore"/>

<js lib="jquery datatables staterestore buttons">
<![CDATA[
$(document).ready(function() {
    var table = $('#example').DataTable({
        dom: 'Blfrtip',
        buttons:['createState', 'savedStates']
    });

    $('#save').on('click', function() {
        table.stateRestore.state($('#state-selector').val()).save();
    })

    $('#load').on('click', function() {
        table.stateRestore.state($('#state-selector').val()).load();
    })

    $('#delete').on('click', function() {
        table.stateRestore.state($('#state-selector').val()).delete();
    })

    $('#deleteAll').on('click', function() {
        table.stateRestore.states().delete();
    })

    $('#deleteSkip').on('click', function() {
        table.stateRestore.state($('#state-selector').val()).delete(true);
    })

    $('#deleteAllSkip').on('click', function() {
        table.stateRestore.states().delete(true);
    })

    $('#add').on('click', function() {
        table.stateRestore.state.add($('#state-selector').val());
    })
});
]]>
</js>

<title lib="stateRestore">Basic StateRestore Example - API</title>

<info><![CDATA[
This example demonstrates all of the API methods that are available within StateRestore and how they can be used outside of the usual buttons interactions.

Use the input element to the right to input an identifier. The other buttons will then implement the relevant API methods.

<input id="state-selector"></input>
<button id="save">Save</button>
<button id="add">Add State</button>
<button id="load">Load</button>
<button id="delete">Delete</button>
<button id="deleteSkip">Delete and skip modal</button>
<button id="deleteAll">Delete All</button>
<button id="deleteAllSkip">Delete All skipping modal</button>
]]></info>

</dt-example>