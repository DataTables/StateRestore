<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="html" table-class="display nowrap" order="1">

<css lib="datatables buttons staterestore select"/>

<js lib="jquery datatables staterestore buttons select">
<![CDATA[

$('#example').DataTable({
	ajax: '../data/objects.txt',
	columns: [
		{ data: 'name' },
		{ data: 'position' },
		{ data: 'office' },
		{ data: 'salary' }
	],
	layout: {
		topStart: {
			buttons: ['createState', 'savedStates']
		}
	},
	rowId: 'id',
	select: true
});

]]>
</js>

<js-vanilla>
<![CDATA[

new DataTable('#example', {
	ajax: '../data/objects.txt',
	columns: [
		{ data: 'name' },
		{ data: 'position' },
		{ data: 'office' },
		{ data: 'salary' }
	],
	layout: {
		topStart: {
			buttons: ['createState', 'savedStates']
		}
	},
	rowId: 'id',
	select: true
});

]]>
</js-vanilla>

<title lib="stateRestore">Select Integration</title>

<info><![CDATA[

This example shows how the `-init stateRestore` extension behaves alongside the `-init select` extension. The selections made in Select are able to be stored and restored when using StateRestore.

]]></info>

<custom-table>
<table id="example" class="display" style="width:100%">
    <thead>
        <tr>
            <th>Name</th>
            <th>Position</th>
            <th>Office</th>
            <th>Salary</th>
        </tr>
    </thead>
    <tfoot>
        <tr>
            <th>Name</th>
            <th>Position</th>
            <th>Office</th>
            <th>Salary</th>
        </tr>
    </tfoot>
</table>
</custom-table>

</dt-example>
