<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="html" table-class="display nowrap" order="1">

<css lib="datatables buttons staterestore"/>

<js lib="jquery datatables staterestore buttons">
<![CDATA[

var activeStates = $('<div>');
var table = $('#example').DataTable({
	layout: {
		top1Start: activeStates,
		topStart: {
			buttons: ['createState', 'savedStates']
		}
	}
});

table.on('draw stateRestore-change', function () {
	let active = table.stateRestore.activeStates();
	let activeString =
		active.length > 0
			? 'Active States: ' + active.map((a) => a.name).join(', ')
			: 'No active state';

	activeStates.text(activeString);
});

// Set initial text
table.draw();

]]>
</js>

<js-vanilla>
<![CDATA[

let activeStates = document.createElement('div');
let table = new DataTable('#example', {
	layout: {
		top1Start: activeStates,
		topStart: {
			buttons: ['createState', 'savedStates']
		}
	}
});

table.on('draw stateRestore-change', function () {
	let active = table.stateRestore.activeStates();
	let activeString =
		active.length > 0
			? 'Active States: ' + active.map((a) => a.name).join(', ')
			: 'No active state';

	activeStates.textContent = activeString;
});

// Set initial text
table.draw();

]]>
</js-vanilla>

<title lib="StateRestore">Label to Display Active States</title>

<info><![CDATA[
This example shows how the `-api stateRestore.activeStates()` API method can be used to display the names of the active states in a label on the page.

You can use the data returned by `-api stateRestore.activeStates()` to display the current states anywhere on the page. The method also returns the state data that is required to implement the states.
]]></info>

</dt-example>
