<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="html" table-class="display nowrap" order="1">

<css lib="datatables buttons staterestore">
table.inputs td {
	padding: 5px;
}
</css>

<js lib="jquery datatables staterestore buttons">
<![CDATA[
 
$(document).ready(function () {
	var minEl = $('#min');
	var maxEl = $('#max');

	// Custom range filtering function
	$.fn.dataTable.ext.search.push(function (settings, data, dataIndex) {
		var min = parseInt(minEl.val(), 10);
		var max = parseInt(maxEl.val(), 10);
		var age = parseFloat(data[3]) || 0; // use data for the age column

		if (
			(isNaN(min) && isNaN(max)) ||
			(isNaN(min) && age <= max) ||
			(min <= age && isNaN(max)) ||
			(min <= age && age <= max)
		) {
			return true;
		}

		return false;
	});

	var table = $('#example').DataTable({
		dom: 'Bfrtip',
		buttons: ['createState', 'savedStates'],
		stateSaveParams: function (s, data) {
			data.min = minEl.val();
			data.max = maxEl.val();
		},
		stateLoadParams: function (s, data) {
			minEl.val(data.min);
			maxEl.val(data.max);
		},
	});

	// Changes to the inputs will trigger a redraw to update the table
	minEl.on('input', function () {
		table.draw();
	});
    maxEl.on('input', function () {
		table.draw();
	});
});

]]>
</js>

<title lib="stateRestore">Custom State Data</title>

<info><![CDATA[

This example shows how custom data can be saved in the state object and then used when a specific state is restored.

In this example we [take the DataTables custom range search example](https://datatables.net/examples/plug-ins/range_filtering.html) which has two input elements, and add them into the state saving object.

Whe the `-init stateSaveParams` event is triggered the values for the two inputs are stored in the table's state. StateRestore then handles storing and saving that into specific named states. The `-init stateLoadParams` function is triggered when a state is being loaded - in this case we restore the two values into the input elements.

This means that it is possible to store and reload any custom elements that you may have on your page.

]]></info>

<demo-html>
	<table class="inputs">
		<tr>
			<td>Minimum age:</td>
			<td><input type="text" id="min" name="min" /></td>
		</tr>
		<tr>
			<td>Maximum age:</td>
			<td><input type="text" id="max" name="max" /></td>
		</tr>
	</table>
</demo-html>

</dt-example>