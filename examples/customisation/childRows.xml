<?xml version="1.0" encoding="UTF-8" ?>
<dt-example table-type="ajax-details" order="6">

<css lib="datatables staterestore buttons"><![CDATA[
td.details-control {
	background: url('../resources/details_open.png') no-repeat center center;
	cursor: pointer;
}
tr.shown td.details-control {
	background: url('../resources/details_close.png') no-repeat center center;
}
]]></css>
<js lib="jquery datatables staterestore buttons" />

<title>Child Rows</title>
<js><![CDATA[

// Formatting function for row details - modify as you need
function format(d) {
	// `d` is the original data object for the row
	return (
		'<dl>' +
		'<dt>Full name:</dt>' +
		'<dd>' +
		d.name +
		'</dd>' +
		'<dt>Extension number:</dt>' +
		'<dd>' +
		d.extn +
		'</dd>' +
		'<dt>Extra info:</dt>' +
		'<dd>And any further details here (images etc)...</dd>' +
		'</dl>'
	);
}

var table = $('#example').DataTable({
	ajax: '../data/objects.txt',
	columns: [
		{
			className: 'dt-control',
			orderable: false,
			data: null,
			defaultContent: ''
		},
		{ data: 'name' },
		{ data: 'position' },
		{ data: 'office' },
		{ data: 'salary' }
	],
	layout: {
		topStart: {
			buttons: ['createState', 'savedStates']
		}
	},
	order: [[1, 'asc']],
	rowId: 'id'
});

// State handling for restoring child rows
table.on('requestChild', function (e, row) {
	row.child(format(row.data())).show();
});

// Add event listener for opening and closing details
table.on('click', 'tbody td.dt-control', function () {
	var tr = $(this).closest('tr');
	var row = table.row(tr);

	if (row.child.isShown()) {
		// This row is already open - close it
		row.child.hide();
	}
	else {
		// Open this row
		row.child(format(row.data())).show();
	}
});

]]></js>

<js-vanilla><![CDATA[

// Formatting function for row details - modify as you need
function format(d) {
	// `d` is the original data object for the row
	return (
		'<dl>' +
		'<dt>Full name:</dt>' +
		'<dd>' +
		d.name +
		'</dd>' +
		'<dt>Extension number:</dt>' +
		'<dd>' +
		d.extn +
		'</dd>' +
		'<dt>Extra info:</dt>' +
		'<dd>And any further details here (images etc)...</dd>' +
		'</dl>'
	);
}

let table = new DataTable('#example', {
	ajax: '../data/objects.txt',
	columns: [
		{
			className: 'dt-control',
			orderable: false,
			data: null,
			defaultContent: ''
		},
		{ data: 'name' },
		{ data: 'position' },
		{ data: 'office' },
		{ data: 'salary' }
	],
	layout: {
		topStart: {
			buttons: ['createState', 'savedStates']
		}
	},
	order: [[1, 'asc']],
	rowId: 'id'
});

// State handling for restoring child rows
table.on('requestChild', function (e, row) {
	row.child(format(row.data())).show();
});

// Add event listener for opening and closing details
table.on('click', 'tbody td.dt-control', function (e) {
	let tr = e.target.closest('tr');
	let row = table.row(tr);

	if (row.child.isShown()) {
		// This row is already open - close it
		row.child.hide();
	}
	else {
		// Open this row
		row.child(format(row.data())).show();
	}
});

]]></js-vanilla>

<info><![CDATA[

This example shows how it is possible to integrate child rows with StateRestore by adding a listener for the `-event requestChild`.

The DataTables API has a number of methods for attaching child rows to a row in the DataTable. This can be used to show additional information about a row, useful for cases where you wish to convey more information about a row than there is space for in the host table.

Here the `-api row().child()` api method is used to display each row stored in the state when the `-event requestChild` event is triggered.
]]></info>

</dt-example>
