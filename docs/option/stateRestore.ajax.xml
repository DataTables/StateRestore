<?xml version="1.0" encoding="UTF-8" ?>
<dt-option library="StateRestore">
	<name>stateRestore.ajax</name>
	<summary>Setup the loading and saving of states over ajax</summary>
	<since>0.0.1</since>

	<type type="boolean">
		<description>
            `false` if ajax is not to be used. If ajax is to be used then this should be set to a string so that StateRestore can send requests to the appropriate location.
        </description>
	</type>

    <type type="string">
		<description>
            This option should be set to a string when StateRestore is to attempt to use ajax to load and save states. This string should be a url to tell StateRestore where it should make requests.
        </description>
	</type>

	<default value="false">
        The default value for the `-init stateRestore.ajax` option is `false` meaning that as standard the creation and saving of states will be done using the local session storage.
	</default>
	<description>
		<![CDATA[
		This option allows StateRestore to load and save states over ajax. If the value provided for this option is a string, StateRestore will use it as the destination url for requests via ajax.

		As default the value is `false`, meaning that the states will be saved in the local session storage. Setting the value of this option to `true` has no effect.

		Take a look at [this example]([../extensions/StateRestore/examples/initialisation/ajax.html) to see this in action.
        ]]>
	</description>

<example title="Set ajax url for StateRestore to send requests to"><![CDATA[
$('#example').DataTable({
    dom: 'Blfrtip',
    ajax: {
        url: "../data/2500States.txt",
        dataSrc: 'data'
    },
    buttons:[
        'createStateRestore',
        {
            extend: 'savedStates',
            config: {
                ajax: '../stateControllers/stateRestore.php'
            }
        }
    ]
});
]]></example>

</dt-option>