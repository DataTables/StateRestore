<?xml version="1.0" encoding="UTF-8" ?>
<dt-option library="StateRestore">
	<name>stateRestore.saveState.columns</name>
	<summary>Enable/Disable saving the column searching and/or visibility</summary>
	<since>0.0.1</since>

	<type type="object">
		<description>
            When this initialisation option is an object, it takes two properties - `-init stateRestore.saveState.columns.search` and `-init stateRestore.saveState.columns.visible`. These are both boolean values that enable/disable column searching and visibility respectively.
        </description>
	</type>

    <type type="boolean">
		<description>
            When this initialisation option is set to `true`, column visibility and searching will both be enabled. When it is `false` both column visibility and searching will be disabled.
        </description>
	</type>

	<default value="object">
        The default value for the `-init stateRestore.saveState.columns` option is and object containing the `-init stateRestore.columns.saveState.search` and `-init stateRestore.saveState.columns.visible` initialisation options. Both of these have a default value of `true`.
	</default>
	<description>
		<![CDATA[
		This option allows for the saving of column visibility and searching to be enabled or disabled.

		As default the value is an object, containing the `-init stateRestore.saveState.columns.search` and `-init stateRestore.saveState.columns.visible` initialisation options. Both of these have a default value of `true`. The option can also be a boolean value that will either enable or disable both `-init stateRestore.saveState.columns.search` and `-init stateRestore.saveState.columns.visible`.

        ]]>
	</description>

<example title="Disable column search saving"><![CDATA[
// Setup - add a text input to each footer cell
$('#example tfoot th').each( function () {
    var title = $(this).text();
    $(this).html( '<input type="text" placeholder="Search '+title+'" />' );
} );

$('#example').DataTable({
    dom: 'Blfrtip',
    colReorder: true,
    buttons:[
        'createStateRestore',
        {
            extend: 'savedStates',
            config: {
                columns:{
                    search: false
                }
            }
        }
    ],
    initComplete: function () {
        // Apply the search
        this.api().columns().every( function () {
            var that = this;

            $( 'input', this.footer() ).on( 'keyup change clear', function () {
                if ( that.search() !== this.value ) {
                    that
                        .search( this.value )
                        .draw();
                }
            } );
        } );
    }
});
]]></example>

<example title="Disable column visibility saving"><![CDATA[
 $('#example').DataTable({
    dom: 'Blfrtip',
    buttons:[
        'createStateRestore',
        {
            extend: 'savedStates',
            config: {
                columns:{
                    visible: false
                }
            }
        },
        'colvis'
    ]
});
]]></example>

<example title="Disable column visibility and search saving"><![CDATA[
// Setup - add a text input to each footer cell
$('#example tfoot th').each( function () {
    var title = $(this).text();
    $(this).html( '<input type="text" placeholder="Search '+title+'" />' );
} );
$('#example').DataTable({
    dom: 'Blfrtip',
    buttons:[
        'createStateRestore',
        {
            extend: 'savedStates',
            config: {
                columns: false
            }
        },
        'colvis'
    ],
    initComplete: function () {
        // Apply the search
        this.api().columns().every( function () {
            var that = this;

            $( 'input', this.footer() ).on( 'keyup change clear', function () {
                if ( that.search() !== this.value ) {
                    that
                        .search( this.value )
                        .draw();
                }
            } );
        } );
    }
});
]]></example>

</dt-option>