<?xml version="1.0" encoding="UTF-8" ?>
<dt-option library="StateRestore">
	<name>stateRestore.saveState</name>
	<summary>Enable/Disable saving for various datatables elements</summary>
	<since>0.0.1</since>

	<type type="object">
		<description>
            This initialisation option is an object that includes a variety of boolean values that enable or disable the saving of different elements of datatables
        </description>
	</type>

	<default value="object">
        The default value for the `-init stateRestore.saveState` option is an object as follows. This will save everything that can possibly be saved when using datatables.

        ```
        {
			colReorder: true,
			columns: {
				search: true,
				visible: true
			},
			order: true,
			paging: true,
			scroller: true,
			search: true,
			searchBuilder: true,
			searchPanes: true,
		}
        ```
	</default>
	<description>
		<![CDATA[
This option allows limitations to be imposed on what StateRestore will save. The option is an object containing boolean values, one for each element that could be saved. These are as follows.

### order
This option allows for the saving of the order of the columns to be enabled or disabled.

As default the value is `true`, meaning that the column order will be saved. If this option is set to `false`, then column order saving will be disabled.

Take a look at [this example]([../extensions/StateRestore/examples/customisation/noOrder.html) to see this in action.

This option is different to the `-init stateRestore.colReorder` option. It decides whether to save the order of the columns horizontally across the table, something that is changeable with the `-init colReorder` option. This option decides whether to save the order of the data within the columns (ascending/descending).
### paging
This option allows for the saving of the paging to be enabled or disabled.

As default the value is `true`, meaning that the paging will be saved. If this option is set to `false`, then the paging saving will be disabled.

Take a look at [this example]([../extensions/StateRestore/examples/customisation/noPaging.html) to see this in action.
### search
This option allows for the saving of the search to be enabled or disabled.

As default the value is `true`, meaning that the search will be saved. If this option is set to `false`, then the search saving will be disabled.

Take a look at [this example]([../extensions/StateRestore/examples/customisation/noSearch.html) to see this in action.
### columns.search
This option allows for the saving of the order of the columns to be enabled or disabled.

As default the value is `true`, meaning that the column searches will be saved. If this option is set to `false`, then column searches will not be saved.

Take a look at [this example]([../extensions/StateRestore/examples/customisation/noColumnSearch.html) to see this in action.
### columns.visible
This option allows for the saving of the visibility of the columns to be enabled or disabled.

As default the value is `true`, meaning that the column visibilities will be saved. If this option is set to `false`, then column visibilites will not be saved.

Take a look at [this example]([../extensions/StateRestore/examples/customisation/noColumnVisibility.html) to see this in action.
### colReorder
This option allows for the saving of the order of the columns across the table to be enabled or disabled. It is only applicable when `-init stateRestore` is being used with `-init colReorder`.

As default the value is `true`, meaning that the order of the columns across the table will be saved. If this option is set to `false`, the order of the columns across the table will not be saved.

Take a look at [this example]([../extensions/StateRestore/examples/customisation/noColReorder.html) to see this in action.

This option is different to the `stateRestore.saveState.order` option. It decides whether to save the order of the data within the columns (ascending/descending). This option decides whether to save the order of the columns horizontally across the table, something that is changeable with the `-init colReorder` option.
### scroller
This option allows for the saving of the `-init scroller` position to be enabled or disabled. This option is only applicable when both the `-init stateRestore` and `-init scroller` extensions are in use.

As default the value is `true`, meaning that the `-init scroller` position will be saved. If this option is set to `false`, then the `-init scroller` position saving will be disabled.

Take a look at [this example]([../extensions/StateRestore/examples/customisation/noScroller.html) to see this in action.
### searchBuilder
This option allows for the saving of the `-init searchBuilder` state to be enabled or disabled. This option is only applicable when both the `-init stateRestore` and `-init searchBuilder` extensions are in use.

As default the value is `true`, meaning that the `-init searchBuilder` state will be saved. If this option is set to `false`, then the `-init searchBuilder` state saving will be disabled.

Take a look at [this example]([../extensions/StateRestore/examples/customisation/nosearchBuilder.html) to see this in action.
### searchPanes
This option allows for the saving of the `-init searchPanes` state to be enabled or disabled. This option is only applicable when both the `-init stateRestore` and `-init searchPanes` extensions are in use.

As default the value is `true`, meaning that the `-init searchPanes` state will be saved. If this option is set to `false`, then the `-init searchPanes` state saving will be disabled.

Take a look at [this example]([../extensions/StateRestore/examples/customisation/noSearchPanes.html) to see this in action.

        ]]>
	</description>

<example title="Disable paging saving"><![CDATA[
 $('#example').DataTable({
    dom: 'Blfrtip',
    buttons:[
        'createStateRestore',
        {
            extend: 'savedStates',
            config: {
                saveState: {
                    paging: false
                }
            }
        },
        'colvis'
    ]
});
]]></example>
<example title="Disable column visibility saving"><![CDATA[
 $('#example').DataTable({
    dom: 'Blfrtip',
    buttons:[
        'createStateRestore',
        {
            extend: 'savedStates',
            config: {
                saveState: {
                    columns: {
                        visible: false
                    }
                }
            }
        },
        'colvis'
    ]
});
]]></example>

<related type="option">stateRestore.toggle</related>

</dt-option>