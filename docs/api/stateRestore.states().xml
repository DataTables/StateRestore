<?xml version="1.0" encoding="UTF-8" ?>
<dt-api library="StateRestore">
	<name>stateRestore.states()</name>
	<summary>Get states from StateRestore</summary>
	<since>1.0.0</since>

	<type type="function">
		<signature>stateRestore.state()</signature>
        <parameter type="string[]" name="identifier">An array of strings that are used to identify the desired states.</parameter>
		<description>Retrieves stored states from the StateRestore extension.</description>
		<returns type="DataTablesApi">Returns a DataTables API containing the desired states so that chaining can occur.</returns>
	</type>

	<description>
	<![CDATA[
This method provides the ability to retrieve states that are managed by the `-init stateRestore` extension.

`-api stateRestore.states()` takes one argument, `identifier`. This is an array of strings that are used to identify the states throughout StateRestore.

A Datatables API is returned containing the states that are desired. This method will mainly be used for chaining. 
	]]>

	</description>

	<example title="Get states called 'New State' and 'Old State'"><![CDATA[
$(document).ready(function() {
    var table = $('#example').DataTable({
        dom: 'Blfrtip',
        buttons:['createState', 'savedStates']
    });

    table.stateRestore.states(["New State", "Old State"])
});
]]></example>

<related type="api">stateRestore.state()</related>
<related type="api">stateRestore.states().remove()</related>

</dt-api>
