<?xml version="1.0" encoding="UTF-8" ?>
<dt-api library="StateRestore">
	<name>stateRestore.states().remove()</name>
	<summary>Remove states from StateRestore</summary>
	<since>1.0.0</since>

	<type type="function">
		<signature>stateRestore.states().remove()</signature>
        <parameter type="boolean" name="skipModal" default="false">Boolean value indicating if the confirmation modal should be skipped or not. The default value is `false` meaning that the modal will be shown.</parameter>
		<description>Removes stored states from the StateRestore extension.</description>
		<returns type="DataTablesApi">Returns a DataTables API for chaining.</returns>
	</type>

	<description>
	<![CDATA[
This method provides the ability to remove multiple states that are managed by the StateRestore extension.

`-api stateRestore.states().remove()` takes one argument, `skipModal` that allows the confirmation modal to be bypassed for each state. The default value for `skipModal` is `false` meaning that the modal will be shown. It removes the states retrieved by the previous call to `-api stateRestore.states()`.

A DataTables API instance is returned so that further chaining can occur.

If the `remove` option of the `-type stateRestoreConfig` configuration object is set to `false` then this API method will not do anything.
	]]>

	</description>

	<example title="Remove states called 'New State' and 'Old State'"><![CDATA[
var table = new DataTable('#myTable', {
	layout: {
		topStart: {
			buttons: ['createState', 'savedStates']
		}
	}
});

table.stateRestore.states(['New State', 'Old State']).remove();
]]></example>

<related type="api">stateRestore.states()</related>
<related type="api">stateRestore.state().remove()</related>

</dt-api>